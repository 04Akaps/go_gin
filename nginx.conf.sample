# 사용중인 nginx setting

http {
    # 로드 밸런싱을 위한 upstream
    upstream golangserver { 
        hash $remote_addr consistent;
        # 세션을 유지하는 옵션
        # 만약 user가 1010으로 접속을 하였고, 이후 다시 접속을 한다면 1010으로 다시 접속 되게 유지
        # 이러한 세션 유지가 안되면 유저가 다시 접속했을 떄 다른 포트로 접속할 수도 잇고, 그러면 로그인같은 현상은 다시 진행 해야 한다.

        server 127.0.0.1:1010;
        server 127.0.0.1:2020;
        server 127.0.0.1:3030;
        server 127.0.0.1:4040 weight=5;
        # 가중치는 weight를 뒤에 붙여서 추가 가능
        # backup이라는 option도 있는데 해당 option은 모든 서버가 문제가 생겼을 떄 해당 서버로만 Tx를 보내는 역할
        # 이외에도 옵션이 되게 많음;;

        keepalive 16;
        # 커넥션 수를 의미한다.
        # 1.1을 사용하게 되면 커넥션이 유지 해당 커넥션을 캐싱할 수를 설정한다.
        # 해당 값의 초과된 수의 요청이 들어오면 과거 부터 커넥션을 해제한다.
        # 서버당 100이 적당하다고 한다.
    }

    server {
        listen 80;
        root /Users/yuhojin/Desktop/go_gin_study;
        server_name goginsstudy.com;

        keepalive_timeout 10;
        # 커넥션을 유지하는 시간이다.
        # 길게잡으면 클라이언트는 빠르니깐 좋은데,,, 서버는 요청도 없지만 계속 커넥션을 유지하기 떄문에 손해를 본다.
        # 보통 페이지 로딩 시간보다 조금 길게 잡으면 되니 10초정도??

        location / {
            # server에 들어오는 accessLog
            # local에서 테스트 하면 당연히 127.0.0.1이 찍힌다.
            # 왜냐하면 서버 입장에서는 Client가 접속을 하는 것이 아니라 nginx가 요청을 보내는 것이기 떄문에

            # server에 client의 정보를 넘겨주고자 할 떄 다음과 같은 header를 추가해 주면 된다.
            # 이후 server에서 설정을 해주어야 함.

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_pass http://golangserver/;

            # 성능을 위한 setting
            # default가 1.0으로 동작

            proxy_http_version 1.1;

            # 1.0은 접속 마다 새로운 connection이 만들어 진다.
            # 또한 접속이 완료되면 바로 접속을 끊게 되어 있다.

            # 1.1은 한번 연결하면 계속해서 연결이 되어 있다.
            proxy_set_header Connection "";
        }

        access_log  /Users/yuhojin/Desktop/go_gin_study/ngnixLogs/host.access.log;
        error_log   /Users/yuhojin/Desktop/go_gin_study/ngnixLogs/error.log;
    }
}

events{}
